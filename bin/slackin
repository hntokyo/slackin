#!/usr/bin/env node

var pkg = require('./../package')
var args = require('args')
var slackin = require('./../dist').default

args
  .option(['p', 'port'], 'Port to listen on [$PORT or 3000]', require('hostenv').PORT || process.env.PORT || 3000)
  .option(['h', 'hostname'], 'Hostname to listen on [$HOSTNAME or 0.0.0.0]', require('hostenv').HOSTNAME || process.env.WEBSITE_HOSTNAME || '0.0.0.0')
  .option(['c', 'channels'], 'One or more comma-separated channel names to allow single-channel guests [$SLACK_CHANNELS]', process.env.SLACK_CHANNELS)
  .option(['i', 'interval'], 'How frequently (ms) to poll Slack [$SLACK_INTERVAL or 5000]', process.env.SLACK_INTERVAL || 5000)
  .option(['P', 'path'], 'Path to serve slackin under', '/')
  .option(['s', 'silent'], 'Do not print out warns or errors')
  .option(['x', 'cors'], 'Enable CORS for all routes')
  .option(['C', 'coc'], 'Full URL to a CoC that needs to be agreed to')
  .option(['S', 'css'], 'Full URL to a custom CSS file to use on the main page')
  .option(['I', 'blocked_ip_addresses'],    'One or more comma-separated IP addresses to deny invites to [$BLOCKED_IP_ADDRESSES]',           process.env.BLOCKED_IP_ADDRESSES)
  .option(['D', 'blocked_email_domains'],   'One or more comma-separated email address domains to deny invites to [$BLOCKED_EMAIL_DOMAINS]', process.env.BLOCKED_EMAIL_DOMAINS)
  .option(['E', 'blocked_email_addresses'], 'One or more comma-separated email addresses to deny invites to [$BLOCKED_EMAIL_ADDRESSES]',     process.env.BLOCKED_EMAIL_ADDRESSES)
  .option(['?', 'help'], 'Show the usage information')

var flags = args.parse(process.argv, {
  value: '<team-id> <api-token> <google-captcha-secret> <google-captcha-sitekey>',
  help: false
})

var org = args.sub[0] || process.env.SLACK_SUBDOMAIN
var token = args.sub[1] || process.env.SLACK_API_TOKEN
var emails = process.env.EMAIL_SLACK_LIST || ''
var blocked_ip_addresses = process.env.BLOCKED_IP_ADDRESSES || ''
var blocked_email_domains = process.env.BLOCKED_EMAIL_DOMAINS || ''
var blocked_email_addresses = process.env.BLOCKED_EMAIL_ADDRESSES || ''

var gcaptcha_secret = args.sub[2] || process.env.GOOGLE_CAPTCHA_SECRET
var gcaptcha_sitekey = args.sub[3] || process.env.GOOGLE_CAPTCHA_SITEKEY



if (flags.help) {
  args.showHelp()
}

if (!org || !token || !gcaptcha_sitekey || !gcaptcha_secret) {
  args.showHelp()
} else {
  flags.org = org
  flags.token = token
  flags.emails = emails
  flags.gcaptcha_secret = gcaptcha_secret
  flags.gcaptcha_sitekey = gcaptcha_sitekey
  flags.blocked_ip_addresses = blocked_ip_addresses
  flags.blocked_email_domains = blocked_email_domains
  flags.blocked_email_addresses = blocked_email_addresses
}

var port = flags.port
var hostname = flags.hostname

slackin(flags).listen(port, hostname, function (err) {
  if (err) throw err
  if (!flags.silent) console.log('%s â€“ listening on %s:%d', new Date, hostname, port)
})
